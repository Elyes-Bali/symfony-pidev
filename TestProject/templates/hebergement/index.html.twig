{% extends 'base.html.twig' %}

{% block title %}Hebergement{% endblock %}

{% block body %}
    <h4><b>Liste des Hebergements</b></h4>
    <br>
    <input type="text" class="form-control" id="searchInput" placeholder="Search&hellip;">
    <br><br>

    <div class="table-data__tool-left">
        <a href="{{ path('app_tri_type') }}" class="btn btn-outline-dark btn-sm"><i class="fas fa-sort-alpha-up"></i>Trier par Type</a>
        <a href="{{ path('app_tri_adresse') }}" class="btn btn-outline-dark btn-sm"><i class="fas fa-sort-alpha-down"></i>Trier par Adresse</a>
        <a href="{{ path('app_tri_capacite') }}" class="btn btn-outline-dark btn-sm"><i class="fas fa-sort-alpha-down"></i>Trier par Capacite</a>
        <a href="{{ path('app_tri_prix') }}" class="btn btn-outline-dark btn-sm"><i class="fas fa-sort-alpha-down"></i>Trier par Prix</a>
    </div>
    <br><br>

    <table class="table">
        <thead>
            <tr>
                <th>Capacite</th>
                <th>Prix</th>
                <th>Adresse</th>
                <th>Type</th>
                <th>Description</th>
                <th>Categorie</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
        {% for hebergement in hebergements %}
            <tr>
                <td>{{ hebergement.capacite }}</td>
                <td>{{ hebergement.prix }}</td>
                <td>{{ hebergement.adresse }}</td>
                <td>{{ hebergement.type }}</td>
                <td>{{ hebergement.description }}</td>
                <td>{{ hebergement.categories }}</td>
                <td>
                    <button class="btn"><a style="color:#000;" href="{{ path('app_hebergement_show', {'id': hebergement.id}) }}">Afficher</a></button>
                    <button class="btn"><a style="color:#000;" href="{{ path('app_hebergement_edit', {'id': hebergement.id}) }}">Modifier</a></button>
                    <button class="btn"><a style="color:#000;" href="{{ path('exportPDF', {'id': hebergement.id}) }}">PDF</a></button>
                </td>
            </tr>
        {% else %}
            <tr>
                <td colspan="7">Pas des Hebergements.</td>
            </tr>
        {% endfor %}
        </tbody>
    </table>

    <button class="btn"><a style="color:#000;" href="{{ path('app_hebergement_new') }}">Ajouter une Hebergement</a></button>
    <br><br><br>

    <div class="col-lg-12 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">Statistiques des types selon les prix</h4>
                <canvas id="myChart" style="width:100%;max-width:900px"></canvas>
            </div>
        </div>
    </div>


    <script>
        function filterTable() {
            const filter = document.getElementById('searchInput').value.toUpperCase();
            const rows = document.querySelectorAll('table tr');
            for (let i = 1; i < rows.length; i++) {
                const cols = rows[i].querySelectorAll('td');
                let visible = false;
                for (let j = 0; j < cols.length; j++) {
                    const cell = cols[j];
                    if (cell.innerText.toUpperCase().indexOf(filter) > -1) {
                        visible = true;
                        break;
                    }
                }
                rows[i].style.display = visible ? '' : 'none';
            }
        }
        document.getElementById('searchInput').addEventListener('keyup', filterTable);
	</script>



    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js"></script>
    <script>
    let hebergementTypes = [];
    let hebergementPrix = [];

    {% for hebergement in hebergements %}
        hebergementTypes.push("{{ hebergement.type }}");
        hebergementPrix.push("{{ hebergement.prix }}");
    {% endfor %}

    // Fonction pour générer des couleurs aléatoires
    function getRandomColor() {
        var letters = '0123456789ABCDEF';
        var color = '#';
        for (var i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 15)];
        }
        return color;
    }


    // Création des données pour le graphique
    let chartData = {
        labels: hebergementTypes,
        datasets: [{
            data: hebergementPrix,
            backgroundColor: hebergementTypes.map(name => getRandomColor())
        }]
    };

    // Configuration des options du graphique
    let chartOptions = {
        legend: { display: false },
        title: {
            display: true,
            text: "Statistiques des types des hebergements selon les prix"
        },
        scales: {
            yAxes: [{
                ticks: {
                    beginAtZero: true
                }
            }]
        }
        
    };

    // Création du graphique
    let ctx = document.getElementById('myChart').getContext('2d');
    let myChart = new Chart(ctx, {
        type: 'bar',
        data: chartData,
        options: chartOptions
    });
    </script>

{% endblock %}


